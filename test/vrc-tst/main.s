;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_gfx_vsync
	.import		_gfx_init
	.export		_gfxOn
	.export		_gfxOff
	.export		_setScroll
	.export		_ppuSetAddr
	.export		_strCopy
	.export		_joyRead
	.export		_printHex
	.export		_ctr
	.export		_main

.segment	"DATA"

_ctr:
	.byte	$00

.segment	"RODATA"

L0001:
	.byte	$49,$52,$51,$20,$54,$45,$53,$54,$49,$4E,$47,$00

; ---------------------------------------------------------------
; void __near__ gfxOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gfxOn: near

.segment	"CODE"

;
; gfx_vsync();
;
	ldy     #$00
	jsr     _gfx_vsync
;
; PPU_MASK = 0x0A;
;
	lda     #$0A
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ gfxOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gfxOff: near

.segment	"CODE"

;
; gfx_vsync();
;
	ldy     #$00
	jsr     _gfx_vsync
;
; PPU_MASK = 0;
;
	lda     #$00
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setScroll (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setScroll: near

.segment	"CODE"

;
; PPU_ADDR = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_SCROLL = y;
;
	tay
	lda     (sp),y
	sta     $2005
;
; PPU_SCROLL = x;
;
	iny
	lda     (sp),y
	sta     $2005
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ ppuSetAddr (unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppuSetAddr: near

.segment	"CODE"

;
; PPU_ADDR = addr >> 8;
;
	jsr     ldax0sp
	stx     $2006
;
; PPU_ADDR = addr & 0xff;
;
	ldy     #$00
	lda     (sp),y
	sta     $2006
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ strCopy (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_strCopy: near

.segment	"CODE"

;
; while (*src)PPU_DATA = *src++;
;
L0101:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jeq     incsp2
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     $2007
	jmp     L0101

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ joyRead (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_joyRead: near

.segment	"CODE"

;
; u8 joy = 0;
;
	lda     #$00
	jsr     pusha
;
; JOY_PORT = 0x01;
;
	jsr     decsp1
	lda     #$01
	sta     $4016
;
; JOY_PORT = 0x00;
;
	lda     #$00
	sta     $4016
;
; for (i = 0; i < 8; i++) {
;
	tay
L0138:	sta     (sp),y
	cmp     #$08
	bcs     L012B
;
; joy <<= 1;
;
	iny
	lda     (sp),y
	asl     a
	sta     (sp),y
;
; joy |= JOY_PORT & 1;
;
	lda     $4016
	and     #$01
	ora     (sp),y
	sta     (sp),y
;
; for (i = 0; i < 8; i++) {
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0138
;
; return joy;
;
L012B:	iny
	ldx     #$00
	lda     (sp),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ printHex (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printHex: near

.segment	"CODE"

;
; buff[0] = val >> 4;
;
	jsr     decsp3
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     asrax4
	ldy     #$00
	sta     (sp),y
;
; buff[1] = val & 15;
;
	ldy     #$03
	lda     (sp),y
	and     #$0F
	ldy     #$01
	sta     (sp),y
;
; buff[2] = 0;
;
	lda     #$00
	iny
	sta     (sp),y
;
; buff[0] = buff[0] < 10 ? buff[0] + '0' : buff[0] - 10 + 'A';
;
	tay
	lda     (sp),y
	cmp     #$0A
	bcs     L00EE
	ldx     #$00
	lda     (sp),y
	ldy     #$30
	jmp     L0139
L00EE:	ldx     #$00
	lda     (sp),y
	ldy     #$0A
	jsr     decaxy
	ldy     #$41
L0139:	jsr     incaxy
	ldy     #$00
	sta     (sp),y
;
; buff[1] = buff[1] < 10 ? buff[1] + '0' : buff[1] - 10 + 'A';
;
	iny
	lda     (sp),y
	cmp     #$0A
	bcs     L00F8
	ldx     #$00
	lda     (sp),y
	ldy     #$30
	jmp     L013A
L00F8:	ldx     #$00
	lda     (sp),y
	ldy     #$0A
	jsr     decaxy
	ldy     #$41
L013A:	jsr     incaxy
	ldy     #$01
	sta     (sp),y
;
; strCopy(buff);
;
	lda     sp
	ldx     sp+1
	jsr     pushax
	jsr     _strCopy
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; gfx_init();
;
	jsr     decsp8
	ldy     #$00
	jsr     _gfx_init
;
; *((u8 *) 0xB000) = 0;
;
	lda     #$00
	sta     $B000
;
; *((u8 *) 0xB001) = 0;
;
	sta     $B001
;
; *((u8 *) 0xB002) = 1;
;
	lda     #$01
	sta     $B002
;
; *((u8 *) 0xB003) = 0;
;
	lda     #$00
	sta     $B003
;
; ppuSetAddr(0x3F03);
;
	ldx     #$3F
	lda     #$03
	jsr     pushax
	jsr     _ppuSetAddr
;
; PPU_DATA = 0x27; //0x05;
;
	lda     #$27
	sta     $2007
;
; ppuSetAddr(0x3F07);
;
	ldx     #$3F
	lda     #$07
	jsr     pushax
	jsr     _ppuSetAddr
;
; PPU_DATA = 0x09;
;
	lda     #$09
	sta     $2007
;
; ppuSetAddr(0x3F0B);
;
	ldx     #$3F
	lda     #$0B
	jsr     pushax
	jsr     _ppuSetAddr
;
; PPU_DATA = 0x01;
;
	lda     #$01
	sta     $2007
;
; ppuSetAddr(0x3F0F);
;
	ldx     #$3F
	lda     #$0F
	jsr     pushax
	jsr     _ppuSetAddr
;
; PPU_DATA = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_CTRL = 1 << 4; //select bg pattern
;
	lda     #$10
	sta     $2000
;
; ppuSetAddr(0x2000);
;
	ldx     #$20
	lda     #$00
	jsr     pushax
	jsr     _ppuSetAddr
;
; for (i = 0; i < 960; i++)PPU_DATA = ' ';
;
	ldx     #$00
	txa
L0145:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L0031
	dey
	lda     (sp),y
	cmp     #$C0
L0031:	bcs     L002B
	lda     #$20
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L0145
;
; for (i = 0; i < 64; i++)PPU_DATA = 0;
;
L002B:	ldx     #$00
	txa
L0146:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	bne     L003D
	dey
	lda     (sp),y
	cmp     #$40
L003D:	bcs     L0037
	lda     #$00
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L0146
;
; for (i = 0; i < 960; i++)PPU_DATA = ' ';
;
L0037:	ldx     #$00
	txa
L0147:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L0049
	dey
	lda     (sp),y
	cmp     #$C0
L0049:	bcs     L0043
	lda     #$20
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L0147
;
; for (i = 0; i < 64; i++)PPU_DATA = 0;
;
L0043:	ldx     #$00
	txa
L0148:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	bne     L0055
	dey
	lda     (sp),y
	cmp     #$40
L0055:	bcs     L004F
	lda     #$00
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L0148
;
; for (i = 0; i < 960; i++)PPU_DATA = ' ';
;
L004F:	ldx     #$00
	txa
L0149:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L0061
	dey
	lda     (sp),y
	cmp     #$C0
L0061:	bcs     L005B
	lda     #$20
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L0149
;
; for (i = 0; i < 64; i++)PPU_DATA = 0;
;
L005B:	ldx     #$00
	txa
L014A:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	bne     L006D
	dey
	lda     (sp),y
	cmp     #$40
L006D:	bcs     L0067
	lda     #$00
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L014A
;
; for (i = 0; i < 960; i++)PPU_DATA = ' ';
;
L0067:	ldx     #$00
	txa
L014B:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L0079
	dey
	lda     (sp),y
	cmp     #$C0
L0079:	bcs     L0073
	lda     #$20
	sta     $2007
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L014B
;
; for (i = 0; i < 64; i++) {
;
L0073:	ldx     #$00
	txa
L014C:	ldy     #$06
	jsr     staxysp
	ldy     #$07
	lda     (sp),y
	bne     L0085
	dey
	lda     (sp),y
	cmp     #$40
L0085:	bcs     L007F
;
; if (i == 8) {
;
	ldy     #$07
	lda     (sp),y
	bne     L0087
	dey
	lda     (sp),y
	cmp     #$08
	bne     L0087
;
; PPU_DATA = 0x45;
;
	lda     #$45
;
; continue;
;
	jmp     L013B
;
; if (i == 16) {
;
L0087:	ldy     #$07
	lda     (sp),y
	bne     L008D
	dey
	lda     (sp),y
	cmp     #$10
	bne     L008D
;
; PPU_DATA = 0x2a;
;
	lda     #$2A
;
; continue;
;
	jmp     L013B
;
; PPU_DATA = 0;
;
L008D:	lda     #$00
L013B:	sta     $2007
;
; for (i = 0; i < 64; i++) {
;
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jmp     L014C
;
; ram = (u8 *) 0x6000;
;
L007F:	ldx     #$60
	lda     #$00
	ldy     #$02
	jsr     staxysp
;
; ram16 = (u16 *) 0x6000;
;
	jsr     stax0sp
;
; ppuSetAddr(0x2000 + 32 * 3);
;
	ldx     #$20
	lda     #$60
	jsr     pushax
	jsr     _ppuSetAddr
;
; strCopy("IRQ TESTING");
;
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _strCopy
;
; setScroll(0, 0);
;
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _setScroll
;
; gfxOn();
;
	ldy     #$00
	jsr     _gfxOn
;
; i = 16;
;
	ldx     #$00
	lda     #$10
	ldy     #$06
	jsr     staxysp
;
; *((u8 *) 0xB000) = i;
;
	ldy     #$06
	lda     (sp),y
	sta     $B000
;
; *((u8 *) 0xB002) = i + 1;
;
	lda     (sp),y
	clc
	adc     #$01
	sta     $B002
;
; *((u8 *) 0xC000) = i + 2;
;
	lda     (sp),y
	clc
	adc     #$02
	sta     $C000
;
; *((u8 *) 0xC002) = i + 3;
;
	lda     (sp),y
	clc
	adc     #$03
	sta     $C002
;
; *((u8 *) 0xD000) = i + 4;
;
	lda     (sp),y
	clc
	adc     #$04
	sta     $D000
;
; *((u8 *) 0xD002) = i + 5;
;
	lda     (sp),y
	clc
	adc     #$05
	sta     $D002
;
; *((u8 *) 0xE000) = i + 6;
;
	lda     (sp),y
	clc
	adc     #$06
	sta     $E000
;
; *((u8 *) 0xE002) = i + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     $E002
;
; *((u8 *) 0xF000) = 15;
;
	lda     #$0F
	sta     $F000
;
; *((u8 *) 0xF004) = 15;
;
	sta     $F004
;
; *((u8 *) 0xF008) = 3;
;
	lda     #$03
	sta     $F008
;
; asm("cli");
;
	cli
;
; i = 0;
;
	txa
	jsr     staxysp
;
; i++;
;
L00CB:	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	ldy     #$06
	jsr     staxysp
;
; for (u = 0; u < 8; u++)gfx_vsync();
;
	ldx     #$00
	txa
L014D:	ldy     #$04
	jsr     staxysp
	ldy     #$05
	lda     (sp),y
	bne     L00D4
	dey
	lda     (sp),y
	cmp     #$08
L00D4:	bcs     L00CE
	ldy     #$00
	jsr     _gfx_vsync
	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jmp     L014D
;
; ppuSetAddr(0x2000 + 32 * 3);
;
L00CE:	ldx     #$20
	lda     #$60
	jsr     pushax
	jsr     _ppuSetAddr
;
; PPU_DATA = '0' + i;
;
	ldy     #$07
	jsr     ldaxysp
	ldy     #$30
	jsr     incaxy
	sta     $2007
;
; setScroll(0, 0);
;
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _setScroll
;
; }
;
	jmp     L00CB

.endproc

